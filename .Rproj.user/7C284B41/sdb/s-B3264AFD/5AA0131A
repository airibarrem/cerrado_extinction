{
    "contents" : "# LNAE: FOREST-CODE-COMPLIANT HERD ALLOCATOR\n#\n# Created: Feb. 2015\n# Author: Alvaro Iribarrem (IIS-Rio)\n#\n#\n#rm(list=ls())\n\nfc.comply = function(herd, p.ras, p.pot, p.now, f.now, f.lrm, s.scn,\n                     m.ras, m.prd, m.nam, px.area, bgd,\n                     fc.thr=0.5, ival=0, prec=1.e-3){\n  # Input breakdown:\n  # herd - total number of heads to be allocated in the landscape       (SCALAR)\n  # p.ras - allocation prioritization for cattle-ranching               (RASTER)\n  # p.pot - potential sustainable stocking rate                         (RASTER)\n  # p.now - mask marking 1 where pasture currently is                   (RASTER)\n  # f.now - mask marking 1 where forest currently is                    (RASTER)\n  # f.lrm - mask marking 1 where the forest legal reserves are          (RASTER)\n  # s.scn - mask marking 1 where soy will be under considered scenario  (RASTER)\n  # m.ras - map of the municipalities in the region                     (RASTER)\n  # m.prd - map of the current average stocking rate per municipality   (RASTER)\n  # m.nam - names of the municipalities                                 (VECTOR)\n  # px.area - average area of pixel -- all layers should be the same    (SCALAR)\n  # bgd - mask marking 0 inside the region, NA outside                  (RASTER)\n  # fc.thr - forest code compliance threshold - default: 50%            (SCALAR)\n  # ival - initial guess for runs of the prioritization sub-routines    (SCALAR)\n  # prec - precision to be obtained in relative differences             (SCALAR)\n  #\n  # Checks for Forest Code deforestation threshold compliance per municipality\n  if (fc.thr > 1){fc.thr = fc.thr / 100}\n  n.muni = length(unique(m.ras))\n  range = 1:n.muni\n  res = 0*(m.ras/m.ras)\n  herd.ini = herd\n  while((herd/herd.ini > prec*10) & length(range)>0){\n    for (i in range){\n      # Informs on function's progress\n      print (\"** STARTING ITERATION **\")\n      print(paste(\"Remaining herd to be allocated:\",trunc(herd),\"heads\",\n                  paste0(\"(\",round(herd/herd.ini*100,digits=3),\"%)\")))\n      # Starts a try for allocating the remaining herd\n      plot(p.ras, main=\"Remaining cattle priorization layer\")\n      p.xra = allocate.herd(x=p.ras, herd=herd, prd.ras=m.prd, px.area=px.area,\n                            init.value=ival,prec=prec, bgd=bgd, verbose=T)\n      # Computes allocated area in municipality i\n      p.area.m = cond.area(p.xra,p.xra*(m.ras==i),px.val=F)\n      print(paste(\"Tentative pasture area to be allocated in\", m.nam[i],\n                  \"(ha):\", trunc(p.area.m)))\n      plot(p.xra*(m.ras==i), main=paste(\"Tentative allocation of\",\n                                        trunc(p.area.m), \"ha in\", m.nam[i]))\n      # Computes excess area allocated in municipality i\n      m.av = (m.ras==i)-f.lrm\n      xs = allocated.xs(p.area.m,f.now,m.ras==i,xs.thr=fc.thr)\n      print(paste(\"Excess area allocated in\", m.nam[i], \"(ha):\", trunc(xs)))\n      # Re-allocates ok area in the municipality i\n      ok.area = p.area.m - xs\n      print(paste(\"FC compliant area allowed in\",m.nam[i],\"(ha):\",trunc(ok.area)))\n      if (ok.area > prec){\n        # If ok area is not vanishingly small, allocate ok area\n        p.all.m = allocate.area(x=p.ras*(m.ras==i), area=ok.area, bgd=bgd,\n                                init.value=ival, prec=prec, verbose=F)\n        # Informs on allocate area result\n        print(paste(\"Allocated area:\", trunc(cond.area(p.all.m,p.all.m)), \"ha\"))\n        # include allocated area in the result\n        res = res + p.all.m     \n        # compute herd allocated in that area (m.prd is per ha, px.area != 1 ha)\n        p.all.h = sum(values(m.prd*p.all.m),na.rm=T)*px.area\n        print(paste(\"Allocated herd:\", trunc(p.all.h), \"heads\"))\n        # Update remaining herd unallocated\n        herd = herd - p.all.h\n        if(herd < prec){return(res)}\n      }\n      if (xs > 0){ # If excess area is larger then allocated\n        # remove the municipality from the remaining loop\n        p.ras = p.ras - (p.ras*(m.ras==i))\n        range = range[-which(range==i,arr.ind=T)]\n      }\n      print(\"Eligible municipalities remaining:\")\n      print(m.nam[range])\n      # Update available pasture areas\n      p.ras = p.ras - (100000*res)\n      p.ras[p.ras<0]=0\n      if ( max(values(p.ras),na.rm=T) == 0 ){   # priorization layer is emptied\n        print(\"Priorization layer is empty -- exiting routine\")\n        print(paste(trunc(herd), \"unallocated heads\"))\n        return(res)\n      }\n      p.ras = p.ras/max(values(p.ras),na.rm=T)\n    }\n  } \n  return(res) \n}\n\n#test=fc.comply(herd=SCN.hrd, p.ras=ctl.place, p.pot=pot.hrd, p.now=past.t, f.now=for.cov, s.scn=BAU.soy, m.ras=mun.ras, m.prd=mun.prd, m.nam=mun.nam, px.area=px.area, bgd=bgd, fc.thr=0.5, ival=0, prec=1.e-3)",
    "created" : 1458757067181.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2675364983",
    "id" : "5AA0131A",
    "lastKnownWriteTime" : 1424363592,
    "path" : "~/IIS_PROJECTS/Moore/Zonation_AF/fc_comply.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}