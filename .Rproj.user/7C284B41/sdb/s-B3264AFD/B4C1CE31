{
    "contents" : "rm(list=ls())\nrequire(raster)\nrequire(snowfall)\n\nheaviside = function(x){stepfun(0,c(0,1))(x)}\n\nrcompose = function(x, bgx){\n  # read input raster, if x is filename\n  if (is.character(x)){x = raster(x)}\n  # projects input raster into background raster\n  if(!is.na(crs(x))){x = projectRaster(x,bgx,method='ngb')}\n  # remove NA values from input raster\n  x[is.na(x)]=0\n  # mask input raster using the background one\n  x = x + bgx\n  return(x)\n}\n\ncond.area = function(x, xcond, convert.ha=TRUE, px.val=F){\n  # Returns an approximate area of pixels in \"x\" that satisfy \"xcond\" condition.\n  # \"xcond\" must be a logical raster (px values either 0 or 1).\n  zone.count = 0\n  zone.res = zonal(x,xcond,fun=function(x, na.rm){ if(na.rm){length(na.omit(x))}\n                                                   else{length(x)}})\n  if(length(zone.res[,1]) > 1){zone.count = zone.res[[2,2]]}\n  px.a = mean(values(area(x)))\n  res = px.a*zone.count\n  if (convert.ha==TRUE){res = res*100}\n  if (px.val == T){\n    print(paste(\"Px count:\",zone.count))\n    res = zone.count}\n  return(res)\n}\n\n# Intersects x with y, and masks the result with bgx\nintersect.raster = function(x, y, bgx){\n  if(is.character(x)){x=rcompose(x,bgx)}\n  if(is.character(y)){y=rcompose(y,bgx)}\n  return(rcompose(x*y,bgx))}\n\n\n###\n\n\n# Getting the list of names of all sp.dist files to be included\nsp.files = dir('./Flora_Cerrado/')\n\n# Rasterizing the background shapefile Using first file of sp.dist. as template\nbgd = rasterize(shapefile('./biome/Cerrado.shp'),\n                raster(paste0('./Flora_Cerrado/',sp.files[1])))\n\n# preparing bgd to be used as addition mask (add to a raster to apply the mask)\nbgd = bgd/bgd\nbgd[bgd>0]=0\n\n\n# REDD-PAC land-use shapefile\nLU.shp = shapefile('./LU_REDD_PAC/REED_PAC_BAU.shp')\n\n# Names of classes (columns) in LU.shp\nLU.classes = names(LU.shp)\n\n# Native vegetation shapefiles (now = 2010, bau = 2050)\nnat.shp.now = LU.shp[LU.classes %in% c('FORwPA2010','NatLnd2010', 'PRIFOR2010',\n                                   'ForReg2010')]\n\nnat.shp.bau = LU.shp[LU.classes %in% c('FORwPA2050','NatLnd2050', 'PRIFOR2050',\n                                   'ForReg2050')]\n#spplot(nat.now[1],z=names(nat.now[1]))\n\n\n# Reprojecting native vegetation maps\nnat.shp.now = spTransform(nat.shp.now,CRS(proj4string(bgd)))\nnat.shp.bau = spTransform(nat.shp.bau,CRS(proj4string(bgd)))\n\n# Converting native vegetation shapefiles to a combined raster of veg. cover\nnat.now = rasterize(nat.shp.now,bgd,field=nat.shp.now@data[,1])\nnat.now = nat.now + rasterize(nat.shp.now,bgd,field=nat.shp.now@data[,2])\nnat.now = nat.now + rasterize(nat.shp.now,bgd,field=nat.shp.now@data[,3])\nnat.now = nat.now + rasterize(nat.shp.now,bgd,field=nat.shp.now@data[,4])\nnat.now = nat.now + bgd\n\nnat.bau = rasterize(nat.shp.bau,bgd,field=nat.shp.bau@data[,1])\nnat.bau = nat.bau + rasterize(nat.shp.bau,bgd,field=nat.shp.bau@data[,2])\nnat.bau = nat.bau + rasterize(nat.shp.bau,bgd,field=nat.shp.bau@data[,3])\nnat.bau = nat.bau + rasterize(nat.shp.bau,bgd,field=nat.shp.bau@data[,4])\nnat.bau = nat.bau + bgd\n\n\n# Applying intersect.raster and cond.area to all sp.dist files\nsfInit(parallel = T, cpus = 3, type = 'SOCK')\n  sfExportAll()\n  sfLibrary(raster)\n  # sp. potential area maps today\n  pot.maps = sfLapply(paste0('./Flora_Cerrado/',sp.files),rcompose,bgd)\n  # sp. habitats today\n  hab.maps = sfLapply(paste0('./Flora_Cerrado/',sp.files),intersect.raster,nat.now,bgd)\n  #sp. habitats under future LUC\n  bau.maps = sfLapply(paste0('./Flora_Cerrado/',sp.files),intersect.raster,nat.bau,bgd)\n  # List of all the maps for today\n  maps.list = c(pot.maps,hab.maps,bau.maps)\n  # List of the areas (in ha) corresponding to the list of maps above\n  pot.areas = sfLapply(pot.maps,function(x){cond.area(nat.now,x)})\n  hab.areas = sfLapply(hab.maps,function(x){cond.area(nat.now,x)})\n  bau.areas = sfLapply(bau.maps,function(x){cond.area(nat.bau,x)})\nsfStop()\n\n# Computing area data.frames\nnow.df = data.frame(Sp=sub(\"_\",' ',,sp.files))\nnow.df$Pot_Area = pot.areas\nnow.df$Hab_Area = hab.areas\nnow.df$BAU_Area = bau.areas\nnow.df = now.df[order(now.df$Sp),]\n\n#teste.df = now.df\n#teste.df[,3:6] = now.df[,3:6] / now.df[,2]\n#teste.df[,7] =  now.df[,7] / now.df[,6]\n\n# Outputting area data.frames\nwrite.csv(now.df, file='Flora_BRABIOM')\n",
    "created" : 1459291576405.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4072212842",
    "id" : "B4C1CE31",
    "lastKnownWriteTime" : 1459291721,
    "path" : "~/IIS_PROJECTS/cerrado_extinction/hab_gilberto.R",
    "project_path" : "hab_gilberto.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}